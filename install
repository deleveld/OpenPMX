#!/bin/sh
########################################################################
#
# This file is part of OpenPMX (https://github.com/deleveld/openpmx).
# Copyright (c) 2024 Douglas Eleveld.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

TARGET="${1:-pthread}"
LIBTYPE="${2:-shared}"
UNAME="$(uname -s)"
PLATFORM="${3:-${UNAME}}"
OPENPMXPATH=$(cd "$(dirname "${0}")" && pwd)

set -eu

echo "install ${TARGET} ${LIBTYPE} ${PLATFORM}"
echo "path ${OPENPMXPATH}"

# general build flags 
CC="gcc"
RM="rm -vf"
LIBNAME="openpmx"
CFLAGS="-g -O2 -march=native -W -Wall -Wextra"
CLIBFLAGS="-Wfloat-conversion -Wformat -Werror=format-security -Wno-override-init -Wwrite-strings -Isrc"

# platform specific changes
if [ "${PLATFORM}" = "Linux" ]; then
	CLIBFLAGS="${CLIBFLAGS} -fPIC"
elif [[ "${PLATFORM}" =~ MINGW64_NT-* ]]; then
	CFLAGS="${CFLAGS} -I/mingw64/include"
	LFLAGS="${LFLAGS} -L\"${OPENPMXPATH}/lib\" -L/mingw64/lib"
	if [ "${LIBTYPE}" != "static" ]; then
		echo "error: mingw64 platform requires static"
	fi
fi

SOURCEFILES="openpmx.c
			ievaluate.c
			predict.c
			stage1.c
			checkout.c
			popmodel.c
			encode.c
			omegainfo.c
			linalg.c
			print.c
			idata.c
			table.c
			scatter.c
			estimate.c
			simulate.c
			dataconfig/recordinfo.c
			dataconfig/dataconfig.c
			advan/advan.c
			advan/pred.c
			advan/onecomp.c
			advan/onecomp_depot.c
			advan/twocomp.c
			advan/threecomp.c
			advan/diffeqn_test.c
			advan/diffeqn_libgsl.c
			utils/vector.c
			utils/various.c
			bobyqa/bobyqa.c"

echo "clean"
${RM} "${OPENPMXPATH}"/build/*
${RM} "${OPENPMXPATH}"/bin/*
${RM} "${OPENPMXPATH}"/lib/*
${RM} "${OPENPMXPATH}/openpmx"
${RM} "${OPENPMXPATH}/src/openpmx_compile_options.h"
if [ "${TARGET}" = "clean" ]; then
	exit 0
fi

# shared or static library
if [ "${LIBTYPE}" = "shared" ]; then
	echo "build ${LIBTYPE} library"
	AR="gcc -shared -o lib/lib${LIBNAME}.so"
	LFLAGS="-flto"
elif [ "${LIBTYPE}" = "static" ]; then
	echo "build ${LIBTYPE} library"
	AR="ar rcs lib/lib${LIBNAME}.a"
	LFLAGS="-flto -static"
else
	echo "error: install: \"${LIBTYPE}\" must be static or shared"
	exit 1
fi

# install flag for OpenMP target
echo "write compile options"
if [ "${TARGET}" = "openmp" ]; then
	CFLAGS="${CFLAGS} -fopenmp"
	LFLAGS="${LFLAGS} -fopenmp -lgomp"
	echo '#define OPENPMX_PARALLEL_OPENMP' >"${OPENPMXPATH}/src/openpmx_compile_options.h"

# install flag for pthreads target
elif [ "${TARGET}" = "pthread" ]; then
	CFLAGS="${CFLAGS} -pthread"
	LFLAGS="${LFLAGS} -pthread"
	echo '#define OPENPMX_PARALLEL_PTHREADS' >"${OPENPMXPATH}/src/openpmx_compile_options.h"

# install flag for sanitize target
elif [ "${TARGET}" = "sanitize" ]; then
	CFLAGS="${CFLAGS} -pedantic -pthread -fsanitize=address,leak,undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow"
	LFLAGS="${LFLAGS} -pedantic -pthread -fsanitize=address,leak,undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow"
	echo '#define OPENPMX_PARALLEL_PTHREADS' >"${OPENPMXPATH}/src/openpmx_compile_options.h"
	echo '#define OPENPMX_SANATIZE' >>"${OPENPMXPATH}/src/openpmx_compile_options.h"

# install flags for single threaded
elif [ "${TARGET}" = "singlethread" ]; then
	echo '#define OPENPMX_PARALLEL_SINGLETHREAD' >"${OPENPMXPATH}/src/openpmx_compile_options.h"

# unknown install flag
else
	echo "error: install: target \"${TARGET}\" not recognized"
	exit 1
fi

# build openpmxtran
echo "compile openpmxtran"
(cd "${OPENPMXPATH}"; ${CC} ${CFLAGS} "src/openpmxtran.c" -o "bin/openpmxtran" ${LFLAGS} -lm)

# compile the source files to object files and make library
OBJECTFILES=
for FILE in ${SOURCEFILES}
do
	echo "compile ${FILE}"
	BASE=$(basename "${FILE}")
	OBJFILE="${BASE%.*}.o"
	(cd "${OPENPMXPATH}"; ${CC} ${CFLAGS} ${CLIBFLAGS} -Iinclude -c "src/${FILE}" -o "build/${OBJFILE}")
	OBJECTFILES="${OBJECTFILES} build/${OBJFILE}"
done
echo "build library"
(cd "${OPENPMXPATH}"; ${AR} ${OBJECTFILES})

# write the build script with the correct path
echo "write openpmx script"
echo "#!/bin/sh"							>"${OPENPMXPATH}/openpmx"
echo "########################################################################"	>>"${OPENPMXPATH}/openpmx"
echo "# OpenPMX build options"				>>"${OPENPMXPATH}/openpmx"
echo "CC=${CC}"								>>"${OPENPMXPATH}/openpmx"
echo "CFLAGS=\"${CFLAGS}\""					>>"${OPENPMXPATH}/openpmx"
echo "LFLAGS=\"${LFLAGS}\""					>>"${OPENPMXPATH}/openpmx"
echo "OPENPMXPATH=\"${OPENPMXPATH}\""		>>"${OPENPMXPATH}/openpmx"
echo "LIBTYPE=\"${LIBTYPE}\"	"			>>"${OPENPMXPATH}/openpmx"
echo ""										>>"${OPENPMXPATH}/openpmx"
cat "${OPENPMXPATH}/src/_openpmx_template"	>>"${OPENPMXPATH}/openpmx"
chmod a+x "${OPENPMXPATH}/openpmx"

echo "success"
echo "install ${TARGET} ${LIBTYPE} ${PLATFORM}"
echo "path ${OPENPMXPATH}"
