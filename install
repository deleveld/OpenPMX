#!/bin/sh
########################################################################
#
# This file is part of OpenPMX (https://github.com/deleveld/openpmx).
# Copyright (c) 2024 Douglas Eleveld.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# default target is pthreads
TARGET="${1:-pthread}"
OPENPMXDIR=$(cd `dirname $0` && pwd)
PLATFORM="$(uname -s)"

set -eu

# general build flags are for Linux
# some will be changed later depending on platform
CC="gcc"
LIBNAME="openpmx"
CFLAGS="-g -O2 -march=native -W -Wall -Wextra"
CLIBFLAGS="-Wfloat-conversion -Wformat -Werror=format-security -Wno-override-init -Wwrite-strings -Isrc"
LFLAGS="-flto -static"
###AR="gcc -shared -o lib/lib${LIBNAME}.so"
AR="ar rcs lib/lib${LIBNAME}.a"
RM="rm -vf"

# platform specific changes
# linux 
if [ "${PLATFORM}" = "Linux" ]; then
	CLIBFLAGS="${CLIBFLAGS} -fPIC"
# mingw64 
elif [[ "${PLATFORM}" =~ MINGW64_NT-* ]]; then
	CFLAGS="${CFLAGS} -I/mingw64/include"
	LFLAGS="${LFLAGS} -L\"${OPENPMXDIR}/lib\" -L/mingw64/lib"
	AR="ar rcs lib/lib${LIBNAME}.a"
fi

# openpmx source files
SOURCEFILES="openpmx.c
			ievaluate.c
			predict.c
			stage1.c
			checkout.c
			popmodel.c
			encode.c
			omegainfo.c
			linalg.c
			print.c
			idata.c
			table.c
			scatter.c
			estimate.c
			simulate.c
			dataconfig/recordinfo.c
			dataconfig/dataconfig.c
			advan/advan.c
			advan/pred.c
			advan/onecomp.c
			advan/onecomp_depot.c
			advan/twocomp.c
			advan/threecomp.c
			advan/diffeqn_test.c
			advan/diffeqn_libgsl.c
			utils/vector.c
			utils/various.c
			bobyqa/bobyqa.c"

echo "OpenPMX: clean"
${RM} "${OPENPMXDIR}/build/*"
${RM} "${OPENPMXDIR}/bin/*"
${RM} "${OPENPMXDIR}/lib/*"
${RM} "${OPENPMXDIR}/openpmx"
${RM} "${OPENPMXDIR}/src/openpmx_compile_options.h"
if [ "${TARGET}" = "clean" ]; then
	exit 0
fi

# install flag for OpenMP target
if [ "${TARGET}" = "openmp" ]; then
	echo "OpenPMX build: OpenMP"
	CFLAGS="${CFLAGS} -fopenmp"
	LFLAGS="${LFLAGS} -fopenmp -lgomp"
	echo '#define OPENPMX_PARALLEL_OPENMP' >"${OPENPMXDIR}/src/openpmx_compile_options.h"

# install flag for pthreads target
elif [ "${TARGET}" = "pthread" ]; then
	echo "build: pthread"
	CFLAGS="${CFLAGS} -pthread"
	LFLAGS="${LFLAGS} -pthread"
	echo '#define OPENPMX_PARALLEL_PTHREADS' >"${OPENPMXDIR}/src/openpmx_compile_options.h"

# install flag for sanitize target
elif [ "${TARGET}" = "sanitize" ]; then
	echo "build: pthread/sanitize"
	CFLAGS="${CFLAGS} -pedantic -pthread -fsanitize=address,leak,undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow"
	LFLAGS="${LFLAGS} -pedantic -pthread -fsanitize=address,leak,undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow"
	echo '#define OPENPMX_PARALLEL_PTHREADS' >"${OPENPMXDIR}/src/openpmx_compile_options.h"
	echo '#define OPENPMX_SANATIZE' >>"${OPENPMXDIR}/src/openpmx_compile_options.h"

# install flags for single threaded
elif [ "${TARGET}" = "singlethread" ]; then
	echo "build: singlethread"
	echo '#define OPENPMX_PARALLEL_SINGLETHREAD' >"${OPENPMXDIR}/src/openpmx_compile_options.h"

# unknown install flag
else
	echo "error: install: Target \""${TARGET}"\" not recognized"
	exit 1
fi

# build openpmxtran
(cd "${OPENPMXDIR}"; set -x; ${CC} ${CFLAGS} "src/openpmxtran.c" -o "bin/openpmxtran" ${LFLAGS} -lm)

# compile the source files to object files and make library
OBJECTFILES=
for FILE in ${SOURCEFILES}
do
	BASE=$(basename ${FILE})
	OBJFILE="${BASE%.*}.o"
	(cd "${OPENPMXDIR}"; set -x; ${CC} ${CFLAGS} ${CLIBFLAGS} -Iinclude -c "src/${FILE}" -o "build/${OBJFILE}")
	OBJECTFILES="${OBJECTFILES} build/${OBJFILE}"
done
(cd "${OPENPMXDIR}"; set -x; ${AR} ${OBJECTFILES})

# write the build script with the correct path
echo "#!/bin/sh"							>"${OPENPMXDIR}/openpmx"
echo "########################################################################"	>>"${OPENPMXDIR}/openpmx"
echo "# OpenPMX build options"				>>"${OPENPMXDIR}/openpmx"
echo "CC=${CC}"								>>"${OPENPMXDIR}/openpmx"
echo "CFLAGS=\"${CFLAGS}\""					>>"${OPENPMXDIR}/openpmx"
echo "LFLAGS=\"${LFLAGS}\""					>>"${OPENPMXDIR}/openpmx"
echo "OPENPMXDIR=\"${OPENPMXDIR}\""			>>"${OPENPMXDIR}/openpmx"
echo ""										>>"${OPENPMXDIR}/openpmx"
cat "${OPENPMXDIR}/src/_openpmx_template"	>>"${OPENPMXDIR}/openpmx"
chmod a+x "${OPENPMXDIR}/openpmx"

echo "OpenPMX installed to \"${OPENPMXDIR}\""
